import unittest
import os
from src.report_generator import ReportGenerator

class TestReportGenerator(unittest.TestCase):

    def setUp(self):
        self.report_gen = ReportGenerator({
            'http://example.com': ['SQL Injection', 'Cross-Site Scripting']
        })
        self.test_data = {
            'http://example.com': ['SQL Injection', 'Cross-Site Scripting']
        }

    def test_generate_report_json(self):
        output_file = "test_report.json"
        self.report_gen.generate_report(output_file)
        self.assertTrue(os.path.exists(output_file))
        with open(output_file, "r") as f:
            content = f.read()
            self.assertIn("SQL Injection", content)
            self.assertIn("Cross-Site Scripting", content)
        os.remove(output_file)

    def test_generate_report_txt(self):
        output_file = "test_report.txt"
        self.report_gen.generate_report(output_file)
        self.assertTrue(os.path.exists(output_file))
        with open(output_file, "r") as f:
            content = f.read()
            self.assertIn("http://example.com", content)
            self.assertIn("SQL Injection", content)
            self.assertIn("Cross-Site Scripting", content)
        os.remove(output_file)

    def test_report_content(self):
        # Check that the report content contains expected vulnerabilities
        output_file = "test_report.txt"
        self.report_gen.generate_report(output_file)
        with open(output_file, "r") as f:
            content = f.read()
            self.assertIn("SQL Injection", content)
            self.assertIn("Cross-Site Scripting", content)
        os.remove(output_file)

if __name__ == '__main__':
    unittest.main()